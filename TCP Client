from copyreg import pickle
from readline import set_pre_input_hook 
import tqdm
import os
import socket
from telnetlib import IP
import threading
import tkinter as Tk
from tkinter import *
from tkinter import simpledialog
import tkinter as tk
import ipaddress

SEPARATOR = "<SEPERATOR>"
BUFFER_SIZE=4096
def tcp_client():
#    target_host = "www.google.com"
#    target_port = 80

    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    client.connect((Target_ip,Target_port))
    filename="test.txt"
    filesize=os.path.getsize(filename)
    client.send(f"{filename}{SEPARATOR}{filesize}".encode())
#    client.send(b"Hello there.")
#    client.send(b"What all can I send across I wonder")
    progress=tqdm.tqdm(range(filesize), f"Sending {filename}", unit="B", unit_scale=True,unit_divisor=1024)
    with open(filename, "rb") as f:
        while True:
            bytes_read = f.read(BUFFER_SIZE)
            if not bytes_read:
                break
            client.sendall(bytes_read)
            progress.update(len(bytes_read))
    
    response =client.recv(BUFFER_SIZE)

    print(response.decode())
    client.close()

def tcp_server():
#    Server_ip = '0.0.0.0'
#    Server_port = '9998'

    def main():
        server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        server.bind((Server_ip, Server_port))
        server.listen(5)
        print(f'[*] Listening on {Server_ip}:{Server_port}')
        while True:
            client, address = server.accept()
            print(f'[*] Accepted connection from {address[0]}:{address[1]}')
            client_handler = threading.Thread(target=handle_client, args=(client,))
            client_handler.start()
    def handle_client(client_socket):
        with client_socket as sock:
            received=client_socket.recv(BUFFER_SIZE).decode()
            filename, filesize = received.split(SEPARATOR)
            filename=os.path.basename(filename)
            filesize=int(filesize)
            progress = tqdm.tqdm(range(filesize), f"Receiving {filename}", unit= "B", unit_scale=True, unit_divisor=1024)
            with open(filename, "wb") as f:
                while True:
                    bytes_read=client_socket.recv(BUFFER_SIZE)
                    if not bytes_read:
                        break
                    f.write(bytes_read)
                    progress.update(len(bytes_read))
            request= sock.recv(1024)
            print(f'[*] Received: {request.decode("utf-8")}')
            sock.send(b'ACK')
    if __name__ == '__main__':
        main()

def server_input_box():
    master=tk.Tk()
    master.withdraw()
    global Server_ip
    global Server_port
    a=simpledialog.askstring(title="TCP Server IP",prompt="Enter the IP Address you want to host the TCP Server on")
    b=simpledialog.askinteger(title="TCP Server Port",prompt="Enter the Port you want to host the TCP Server on")
#    int_address=int(ipaddress.ip_address(a))
#    print(int_address)
#    byte_address=int_address.to_bytes
    Server_ip = (f'{a}')
    print(Server_ip)
    Server_port = (b)
    print(Server_port)

def target_input_box():
    master=tk.Tk()
    master.withdraw()
    global Target_ip
    global Target_port
    a=simpledialog.askstring(title="TCP Client IP",prompt="Enter the IP Address of the host you want to connect to")
    b=simpledialog.askinteger(title="TCP Client Port",prompt="Enter the Port of the host you want to connect to")
#    int_address=int(ipaddress.ip_address(a))
#    print(int_address)
#    byte_address=int_address.to_bytes
    Target_ip = (f'{a}')
    print(Target_ip)
    Target_port = (b)
    print(Target_port)

def choice_box():
    master=Tk()
    def chosen(a):
        global pick
        pick = a
        master.destroy()
    master.title("TCP Server")
    choices=['TCP Server','TCP Client']
    variable = StringVar(master)
    variable.set('TCP Server')
    box = OptionMenu(master,variable,*choices,command=chosen)
    box.pack()
    mainloop()

choice_box()
if pick == 'TCP Server':
    server_input_box()
    tcp_server()
elif pick == 'TCP Client':
    target_input_box()
    tcp_client()
else:
    print("error")